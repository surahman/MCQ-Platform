# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - pkg/model/http/*.graphqls

# Where should the generated server code go?
exec:
  filename: pkg/http/graph/generated/generated.go
  package: graphql_generated

# Uncomment to enable federation
# federation:
#   filename: graph/generated/federation.go
#   package: generated

# Where should any generated models go?
model:
  filename: pkg/model/http/graph_gen.go
  package: model_http

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: pkg/http/graph/resolvers
  package: graphql_resolvers
  filename_template: "{name}.resolvers.go"

# Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: turn off to make struct-type struct fields not use pointers
# e.g. type Thing struct { FieldA OtherThing } instead of { FieldA *OtherThing }
# struct_fields_always_pointers: true

# Optional: turn off to make resolvers return values instead of pointers for structs
# resolvers_always_return_pointers: true

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - "github.com/surahman/mcq-platform/pkg/model/cassandra"
  - "github.com/surahman/mcq-platform/pkg/model/http"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
  Int32:
    model:
      - github.com/99designs/gqlgen/graphql.Int32
  Int64:
    model:
      - github.com/99designs/gqlgen/graphql.Int64
  QuestionCreate:
    model:
      - model_cassandra.Question
  QuizCreate:
    model:
      - model_cassandra.QuizCore
  StatsResponse:
    model: model_http.StatsResponseGraphQL
