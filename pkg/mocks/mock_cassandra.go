// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/surahman/mcq-platform/pkg/cassandra (interfaces: Cassandra)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cassandra "github.com/surahman/mcq-platform/pkg/cassandra"
)

// MockCassandra is a mock of Cassandra interface.
type MockCassandra struct {
	ctrl     *gomock.Controller
	recorder *MockCassandraMockRecorder
}

// MockCassandraMockRecorder is the mock recorder for MockCassandra.
type MockCassandraMockRecorder struct {
	mock *MockCassandra
}

// NewMockCassandra creates a new mock instance.
func NewMockCassandra(ctrl *gomock.Controller) *MockCassandra {
	mock := &MockCassandra{ctrl: ctrl}
	mock.recorder = &MockCassandraMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCassandra) EXPECT() *MockCassandraMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCassandra) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCassandraMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCassandra)(nil).Close))
}

// Execute mocks base method.
func (m *MockCassandra) Execute(arg0 func(cassandra.Cassandra, interface{}) (interface{}, error), arg1 interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockCassandraMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCassandra)(nil).Execute), arg0, arg1)
}

// Open mocks base method.
func (m *MockCassandra) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockCassandraMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockCassandra)(nil).Open))
}
